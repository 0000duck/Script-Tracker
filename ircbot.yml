IRCBOT_version:
  type: version
  name: smallIRCbot
  id: 97
  description: a small IRC Bot
  version: 5
IRCBOT:
  type: world
  debug: false
  events:
    on server start:
    - wait 1t
    - inject locally path:check_config
    - inject locally path:IRC_connect
    on reload scripts:
    - wait 1t
    - inject locally path:check_config
    on ircconnect command:
    - if <player.is_op.not> queue clear
    - determine fulfilled passively
    - inject locally path:IRC_connect
    on irc message:
    - if <context.message.starts_with[<&lt>action]> queue clear
    - define speaker <context.speaker.escaped>
    - if <server.flag[ircbot.users].as_list||li@> !contains <def[speaker]> flag server ircbot.users:->:<def[speaker]>
    - define colour <yaml[small_irc_bot_config].read[config.colour]||3>
    - if <server.has_flag[ircbot.message_for_<def[speaker]>]> {
      - irc message <context.channel> "<&%colour%><def[speaker]>! I have messages for you!"
      - foreach "<server.flag[ircbot.message_for_<def[speaker]>].as_list>" {
        - irc message <context.channel> "<&%colour%><def[value].unescaped>"
        }
      - flag server ircbot.message_for_<def[speaker]>:!
      }
    - if <context.message.starts_with[<yaml[small_irc_bot_config].read[config.command]||<&lt>>].not> && <context.message.starts_with[<yaml[small_irc_bot_config].read[config.secondary_command]||<&lt>>].not> queue clear
    - define channel <context.channel>
    - define usedcommand <context.message.substring[1,1]||<&lt>>
    - define args <context.message.after[<def[usedcommand]>].replace[<&chr[000D]>].split_by[<&sp>]||none>
    - choose <def[args].get[1]>:
      - case status:
        - define message "Status<&co> online - TPS<&co> <server.recent_tps.get[1].as_money>"
      - case drs:
        - if <yaml[small_irc_bot_config].read[config.admins]||li@> !contains <context.speaker.replace[<&chr[000D]>]> {
          - queue clear
          } else {
          - execute as_server "denizen reload scripts"
          - define message "Reloaded all denizen scripts."
          }
      - case popular:
        - if <server.has_flag[script_tracker.caching.popular.<util.date.time.hour>].not> || true {
          - flag server script_tracker.caching.popular.<util.date.time.hour>:!
          - flag server script_tracker.caching.popular.<util.date.time.hour>:|:<proc[popular_scripts]> duration:2h
          }
        - define scripts <server.flag[script_tracker.caching.popular.<util.date.time.hour>].as_list.get[1].to[5]||li@>
        - if <def[scripts].size> == 0 {
          - define message "I currently do not have any scripts tracked."
          - goto finish
          }
        - define list li@
        - foreach <def[scripts]> {
          - define currentstring "%loop_index%. <&b><def[value].after[/].substring[1,50].unescaped> <&7>(<def[value].before[/]>)<&%colour%>"
          - define list "<def[list].include[<def[currentstring]>]>"
          }
        - define message "Popular scripts<&co> <def[list].formatted>"
      - case poopular:
        - define scripts <proc[popular_scripts].reverse.get[1].to[5]>
        - if <def[scripts].size> == 0 {
          - define message "I currently do not have any scripts tracked."
          - goto finish
          }
        - define list li@
        - foreach <def[scripts]> {
          - define currentstring "%loop_index%. <&b><def[value].after[/].substring[1,50].unescaped> <&7>(<def[value].before[/]>)<&%colour%>"
          - define list "<def[list].include[<def[currentstring]>]>"
          }
        - define message "Poopular scripts<&co> <def[list].formatted>"
      - case script:
        - define script <def[args].get[2].to[50].space_separated||null>
        - if <def[script]> == null {
          - define message "No script specified!"
          - goto finish
          }
        - define info "<proc[script_info].context[<def[script]>]||null>"
        - if <def[info]> == null {
          - define message "No info found on this script."
          - goto finish
          }
        - define message "<&%colour%>Script<&co> <&b><def[info].get[1].unescaped.unescaped> <&%colour%>- Author<&co> <&b><def[info].get[2].unescaped> <&%colour%>- Servers<&co> <&b><def[info].get[4].unescaped> <&%colour%>- link<&co> <&3><def[info].get[3].unescaped>"
      - case author:
        - define author <def[args].get[2].to[50].space_separated||null>
        - if <def[author]> == null {
          - define message "No author specified!"
          - goto finish
          }
        - define info "<proc[author_info].context[<def[author]>]||null>"
        - if <def[info].size||0> == 0 {
          - define message "No info found on this author."
          - goto finish
          }
        - define list li@
        - define size <def[info].size||0>
        - foreach <def[info].alphanumeric.reverse||li@>:
          - define list <def[list].include[<yaml[scripttable].read[script_tracker.scriptinfo.<def[value]>.name].unescaped||unknown>]>
        - if <def[size]> > 10 {
          - define message "<&%colour%><def[author]> is tracking <def[list].size> script(s)<&co><&b> <def[list].get[1].to[10].unescape_contents.formatted> <&7>(and <def[size].sub[10].as_int||0> more!)."
          } else {
          - define message "<&%colour%><def[author]> is tracking <def[list].size> script(s)<&co><&b> <def[list].get[1].to[10].unescape_contents.formatted>."
          }
      - case collect:
        - if <server.has_flag[script_tracker.collect_data_cooldown]> {
          - define message "I already did this too recently! <&7>(10m cooldown)"
          - goto finish
          } else {
          - flag server "script_tracker.collect_data_cooldown:true" duration:10m
          }
        - irc message %channel% "<&%colour%>Reloading database from the script repository..."
        - ~run reload_script_database
        - define message "Reloaded database. I now know of <&b><yaml[scripttable].list_keys[script_tracker.scriptinfo].size> <&%colour%>scripts from <&b><yaml[scripttable].list_keys[script_tracker.authortable].size> <&%colour%>authors."
      - case howto:
        - define message "To start listing your own script, simply follow the explanation on http<&co>//mcmonkey.org/haste/34880."
      - case help:
        - define message "I know of these commands<&co> +popular, +script (script), +author (author), +howto, and +help"
    - mark finish
    - if <def[message].exists.not> queue clear
    - irc message %channel% "<&%colour%>%message%"
  irc_connect:
    - run IRCBOT_connect instantly
  check_config:
    - if <server.has_file[/small_irc_bot/config.yml]> {
      - yaml load:/small_irc_bot/config.yml id:small_irc_bot_config
      } else {
      - yaml create id:small_irc_bot_config
      - yaml id:small_irc_bot_config set config.channels.consoles:->:irc.mcmonkey.org#myfancychannel
      - yaml id:small_irc_bot_config set config.channels.active:->:irc.esper.net#myotherchannel
      - yaml id:small_irc_bot_config set config.admins:->:mrAdmin
      - yaml id:small_irc_bot_config set config.botname:bottymcbotface
      - yaml id:small_irc_bot_config set config.password:dickbutt
      - yaml id:small_irc_bot_config set config.command:<&lt>
      - yaml id:small_irc_bot_config set config.secondary_command:.
      - yaml id:small_irc_bot_config set config.colour:3
      - yaml savefile:/small_irc_bot/config.yml id:small_irc_bot_config
      }
IRCBOT_connect:
  type: task
  debug: false
  script:
    - define list <parse:<yaml[small_irc_bot_config].read[config.channels.consoles].include[<yaml[small_irc_bot_config].read[config.channels.active]||li@>]||li@>>
    - define servers <def[list].parse[before[<&ns>]].deduplicate>
    - foreach <def[servers]>:
      - ~irc quit ircserver@<def[value]>
      - ~irc connect ircserver@<def[value]>
      - irc raw ircserver@<def[value]> "USER <yaml[small_irc_bot_config].read[config.botname]||mcbotface> <yaml[small_irc_bot_config].read[config.botname]||mcbotface>_ <yaml[small_irc_bot_config].read[config.botname]||mcbotface>__ <yaml[small_irc_bot_config].read[config.botname]||mcbotface>"
      - irc raw ircserver@<def[value]> "NICK <yaml[small_irc_bot_config].read[config.botname]||mcbotface>"
      - irc raw ircserver@<def[value]> "msg nickserv identify <yaml[small_irc_bot_config].read[config.password]||mcbotface>"
    - foreach <def[list]>:
      - irc join ircchannel@<def[value]>
IRCBOT_message:
  type: task
  debug: false
  script:
  - if <server.has_flag[overlord_flood]> {
    - define wait <server.flag[overlord_flood].as_int>t
    - flag server overlord_flood:+:40 duration:5s
    - wait <def[wait]>
    }
    else {
    - flag server overlord_flood:+:40 duration:5s
    }
  - define type <def[1]||consoles>
  - choose <def[type]>:
    - case all:
      - define list <parse:<yaml[small_irc_bot_config].read[config.channels.consoles].include[<yaml[small_irc_bot_config].read[config.channels.active]||li@>]||li@>>
    - case consoles:
      - define list <parse:<yaml[small_irc_bot_config].read[config.channels.consoles]||li@>>
    - case active:
      - define list <parse:<yaml[small_irc_bot_config].read[config.channels.active]||li@>>
    - default:
      - debug error "No valid servers were specified to run <script> for."
      - queue clear
  - define message <def[2].unescaped||null>
  - foreach <def[list]>:
    - irc message ircchannel@<def[value]> "<&6><def[message]>"
overlord_situation_responses:
  type: world
  debug: false
  events:
    on script generates error:
    - define message "<&5>[ERROR] <&4><context.script||<context.queue||undefined>><&co><&6> <context.message>"
    - run IRCBOT_message instantly "def:consoles|<def[message].escaped>" instantly
    on system time minutely:
    - if <server.recent_tps.get[1]> <= 19 {
      - define message "<&9>[WARNING] - <&6> TPS LOW! (<server.recent_tps.get[1]>)."
      - run IRCBOT_message instantly "def:consoles|<def[message].escaped>" instantly
      }
    on system time hourly:
    - webget "http://stats.denizenscript.com/tracker?script=97&version=<s@ircbot_version.yaml_key[version]>"
